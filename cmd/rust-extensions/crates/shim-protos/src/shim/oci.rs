// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `github.com/containerd/containerd/runtime/v2/runc/options/oci.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Options {
    // message fields
    pub no_pivot_root: bool,
    pub no_new_keyring: bool,
    pub shim_cgroup: ::std::string::String,
    pub io_uid: u32,
    pub io_gid: u32,
    pub binary_name: ::std::string::String,
    pub root: ::std::string::String,
    pub criu_path: ::std::string::String,
    pub systemd_cgroup: bool,
    pub criu_image_path: ::std::string::String,
    pub criu_work_path: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Options {
    fn default() -> &'a Options {
        <Options as ::protobuf::Message>::default_instance()
    }
}

impl Options {
    pub fn new() -> Options {
        ::std::default::Default::default()
    }

    // bool no_pivot_root = 1;


    pub fn get_no_pivot_root(&self) -> bool {
        self.no_pivot_root
    }
    pub fn clear_no_pivot_root(&mut self) {
        self.no_pivot_root = false;
    }

    // Param is passed by value, moved
    pub fn set_no_pivot_root(&mut self, v: bool) {
        self.no_pivot_root = v;
    }

    // bool no_new_keyring = 2;


    pub fn get_no_new_keyring(&self) -> bool {
        self.no_new_keyring
    }
    pub fn clear_no_new_keyring(&mut self) {
        self.no_new_keyring = false;
    }

    // Param is passed by value, moved
    pub fn set_no_new_keyring(&mut self, v: bool) {
        self.no_new_keyring = v;
    }

    // string shim_cgroup = 3;


    pub fn get_shim_cgroup(&self) -> &str {
        &self.shim_cgroup
    }
    pub fn clear_shim_cgroup(&mut self) {
        self.shim_cgroup.clear();
    }

    // Param is passed by value, moved
    pub fn set_shim_cgroup(&mut self, v: ::std::string::String) {
        self.shim_cgroup = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_shim_cgroup(&mut self) -> &mut ::std::string::String {
        &mut self.shim_cgroup
    }

    // Take field
    pub fn take_shim_cgroup(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.shim_cgroup, ::std::string::String::new())
    }

    // uint32 io_uid = 4;


    pub fn get_io_uid(&self) -> u32 {
        self.io_uid
    }
    pub fn clear_io_uid(&mut self) {
        self.io_uid = 0;
    }

    // Param is passed by value, moved
    pub fn set_io_uid(&mut self, v: u32) {
        self.io_uid = v;
    }

    // uint32 io_gid = 5;


    pub fn get_io_gid(&self) -> u32 {
        self.io_gid
    }
    pub fn clear_io_gid(&mut self) {
        self.io_gid = 0;
    }

    // Param is passed by value, moved
    pub fn set_io_gid(&mut self, v: u32) {
        self.io_gid = v;
    }

    // string binary_name = 6;


    pub fn get_binary_name(&self) -> &str {
        &self.binary_name
    }
    pub fn clear_binary_name(&mut self) {
        self.binary_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_binary_name(&mut self, v: ::std::string::String) {
        self.binary_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_binary_name(&mut self) -> &mut ::std::string::String {
        &mut self.binary_name
    }

    // Take field
    pub fn take_binary_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.binary_name, ::std::string::String::new())
    }

    // string root = 7;


    pub fn get_root(&self) -> &str {
        &self.root
    }
    pub fn clear_root(&mut self) {
        self.root.clear();
    }

    // Param is passed by value, moved
    pub fn set_root(&mut self, v: ::std::string::String) {
        self.root = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_root(&mut self) -> &mut ::std::string::String {
        &mut self.root
    }

    // Take field
    pub fn take_root(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.root, ::std::string::String::new())
    }

    // string criu_path = 8;


    pub fn get_criu_path(&self) -> &str {
        &self.criu_path
    }
    pub fn clear_criu_path(&mut self) {
        self.criu_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_criu_path(&mut self, v: ::std::string::String) {
        self.criu_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_criu_path(&mut self) -> &mut ::std::string::String {
        &mut self.criu_path
    }

    // Take field
    pub fn take_criu_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.criu_path, ::std::string::String::new())
    }

    // bool systemd_cgroup = 9;


    pub fn get_systemd_cgroup(&self) -> bool {
        self.systemd_cgroup
    }
    pub fn clear_systemd_cgroup(&mut self) {
        self.systemd_cgroup = false;
    }

    // Param is passed by value, moved
    pub fn set_systemd_cgroup(&mut self, v: bool) {
        self.systemd_cgroup = v;
    }

    // string criu_image_path = 10;


    pub fn get_criu_image_path(&self) -> &str {
        &self.criu_image_path
    }
    pub fn clear_criu_image_path(&mut self) {
        self.criu_image_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_criu_image_path(&mut self, v: ::std::string::String) {
        self.criu_image_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_criu_image_path(&mut self) -> &mut ::std::string::String {
        &mut self.criu_image_path
    }

    // Take field
    pub fn take_criu_image_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.criu_image_path, ::std::string::String::new())
    }

    // string criu_work_path = 11;


    pub fn get_criu_work_path(&self) -> &str {
        &self.criu_work_path
    }
    pub fn clear_criu_work_path(&mut self) {
        self.criu_work_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_criu_work_path(&mut self, v: ::std::string::String) {
        self.criu_work_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_criu_work_path(&mut self) -> &mut ::std::string::String {
        &mut self.criu_work_path
    }

    // Take field
    pub fn take_criu_work_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.criu_work_path, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Options {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.no_pivot_root = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.no_new_keyring = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.shim_cgroup)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.io_uid = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.io_gid = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.binary_name)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.root)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.criu_path)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.systemd_cgroup = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.criu_image_path)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.criu_work_path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.no_pivot_root != false {
            my_size += 2;
        }
        if self.no_new_keyring != false {
            my_size += 2;
        }
        if !self.shim_cgroup.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.shim_cgroup);
        }
        if self.io_uid != 0 {
            my_size += ::protobuf::rt::value_size(4, self.io_uid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.io_gid != 0 {
            my_size += ::protobuf::rt::value_size(5, self.io_gid, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.binary_name.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.binary_name);
        }
        if !self.root.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.root);
        }
        if !self.criu_path.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.criu_path);
        }
        if self.systemd_cgroup != false {
            my_size += 2;
        }
        if !self.criu_image_path.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.criu_image_path);
        }
        if !self.criu_work_path.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.criu_work_path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.no_pivot_root != false {
            os.write_bool(1, self.no_pivot_root)?;
        }
        if self.no_new_keyring != false {
            os.write_bool(2, self.no_new_keyring)?;
        }
        if !self.shim_cgroup.is_empty() {
            os.write_string(3, &self.shim_cgroup)?;
        }
        if self.io_uid != 0 {
            os.write_uint32(4, self.io_uid)?;
        }
        if self.io_gid != 0 {
            os.write_uint32(5, self.io_gid)?;
        }
        if !self.binary_name.is_empty() {
            os.write_string(6, &self.binary_name)?;
        }
        if !self.root.is_empty() {
            os.write_string(7, &self.root)?;
        }
        if !self.criu_path.is_empty() {
            os.write_string(8, &self.criu_path)?;
        }
        if self.systemd_cgroup != false {
            os.write_bool(9, self.systemd_cgroup)?;
        }
        if !self.criu_image_path.is_empty() {
            os.write_string(10, &self.criu_image_path)?;
        }
        if !self.criu_work_path.is_empty() {
            os.write_string(11, &self.criu_work_path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Options {
        Options::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "no_pivot_root",
                |m: &Options| { &m.no_pivot_root },
                |m: &mut Options| { &mut m.no_pivot_root },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "no_new_keyring",
                |m: &Options| { &m.no_new_keyring },
                |m: &mut Options| { &mut m.no_new_keyring },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "shim_cgroup",
                |m: &Options| { &m.shim_cgroup },
                |m: &mut Options| { &mut m.shim_cgroup },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "io_uid",
                |m: &Options| { &m.io_uid },
                |m: &mut Options| { &mut m.io_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "io_gid",
                |m: &Options| { &m.io_gid },
                |m: &mut Options| { &mut m.io_gid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "binary_name",
                |m: &Options| { &m.binary_name },
                |m: &mut Options| { &mut m.binary_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "root",
                |m: &Options| { &m.root },
                |m: &mut Options| { &mut m.root },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "criu_path",
                |m: &Options| { &m.criu_path },
                |m: &mut Options| { &mut m.criu_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "systemd_cgroup",
                |m: &Options| { &m.systemd_cgroup },
                |m: &mut Options| { &mut m.systemd_cgroup },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "criu_image_path",
                |m: &Options| { &m.criu_image_path },
                |m: &mut Options| { &mut m.criu_image_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "criu_work_path",
                |m: &Options| { &m.criu_work_path },
                |m: &mut Options| { &mut m.criu_work_path },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Options>(
                "Options",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Options {
        static instance: ::protobuf::rt::LazyV2<Options> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Options::new)
    }
}

impl ::protobuf::Clear for Options {
    fn clear(&mut self) {
        self.no_pivot_root = false;
        self.no_new_keyring = false;
        self.shim_cgroup.clear();
        self.io_uid = 0;
        self.io_gid = 0;
        self.binary_name.clear();
        self.root.clear();
        self.criu_path.clear();
        self.systemd_cgroup = false;
        self.criu_image_path.clear();
        self.criu_work_path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Options {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Options {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CheckpointOptions {
    // message fields
    pub exit: bool,
    pub open_tcp: bool,
    pub external_unix_sockets: bool,
    pub terminal: bool,
    pub file_locks: bool,
    pub empty_namespaces: ::protobuf::RepeatedField<::std::string::String>,
    pub cgroups_mode: ::std::string::String,
    pub image_path: ::std::string::String,
    pub work_path: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CheckpointOptions {
    fn default() -> &'a CheckpointOptions {
        <CheckpointOptions as ::protobuf::Message>::default_instance()
    }
}

impl CheckpointOptions {
    pub fn new() -> CheckpointOptions {
        ::std::default::Default::default()
    }

    // bool exit = 1;


    pub fn get_exit(&self) -> bool {
        self.exit
    }
    pub fn clear_exit(&mut self) {
        self.exit = false;
    }

    // Param is passed by value, moved
    pub fn set_exit(&mut self, v: bool) {
        self.exit = v;
    }

    // bool open_tcp = 2;


    pub fn get_open_tcp(&self) -> bool {
        self.open_tcp
    }
    pub fn clear_open_tcp(&mut self) {
        self.open_tcp = false;
    }

    // Param is passed by value, moved
    pub fn set_open_tcp(&mut self, v: bool) {
        self.open_tcp = v;
    }

    // bool external_unix_sockets = 3;


    pub fn get_external_unix_sockets(&self) -> bool {
        self.external_unix_sockets
    }
    pub fn clear_external_unix_sockets(&mut self) {
        self.external_unix_sockets = false;
    }

    // Param is passed by value, moved
    pub fn set_external_unix_sockets(&mut self, v: bool) {
        self.external_unix_sockets = v;
    }

    // bool terminal = 4;


    pub fn get_terminal(&self) -> bool {
        self.terminal
    }
    pub fn clear_terminal(&mut self) {
        self.terminal = false;
    }

    // Param is passed by value, moved
    pub fn set_terminal(&mut self, v: bool) {
        self.terminal = v;
    }

    // bool file_locks = 5;


    pub fn get_file_locks(&self) -> bool {
        self.file_locks
    }
    pub fn clear_file_locks(&mut self) {
        self.file_locks = false;
    }

    // Param is passed by value, moved
    pub fn set_file_locks(&mut self, v: bool) {
        self.file_locks = v;
    }

    // repeated string empty_namespaces = 6;


    pub fn get_empty_namespaces(&self) -> &[::std::string::String] {
        &self.empty_namespaces
    }
    pub fn clear_empty_namespaces(&mut self) {
        self.empty_namespaces.clear();
    }

    // Param is passed by value, moved
    pub fn set_empty_namespaces(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.empty_namespaces = v;
    }

    // Mutable pointer to the field.
    pub fn mut_empty_namespaces(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.empty_namespaces
    }

    // Take field
    pub fn take_empty_namespaces(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.empty_namespaces, ::protobuf::RepeatedField::new())
    }

    // string cgroups_mode = 7;


    pub fn get_cgroups_mode(&self) -> &str {
        &self.cgroups_mode
    }
    pub fn clear_cgroups_mode(&mut self) {
        self.cgroups_mode.clear();
    }

    // Param is passed by value, moved
    pub fn set_cgroups_mode(&mut self, v: ::std::string::String) {
        self.cgroups_mode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cgroups_mode(&mut self) -> &mut ::std::string::String {
        &mut self.cgroups_mode
    }

    // Take field
    pub fn take_cgroups_mode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cgroups_mode, ::std::string::String::new())
    }

    // string image_path = 8;


    pub fn get_image_path(&self) -> &str {
        &self.image_path
    }
    pub fn clear_image_path(&mut self) {
        self.image_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_image_path(&mut self, v: ::std::string::String) {
        self.image_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_image_path(&mut self) -> &mut ::std::string::String {
        &mut self.image_path
    }

    // Take field
    pub fn take_image_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.image_path, ::std::string::String::new())
    }

    // string work_path = 9;


    pub fn get_work_path(&self) -> &str {
        &self.work_path
    }
    pub fn clear_work_path(&mut self) {
        self.work_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_work_path(&mut self, v: ::std::string::String) {
        self.work_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_work_path(&mut self) -> &mut ::std::string::String {
        &mut self.work_path
    }

    // Take field
    pub fn take_work_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.work_path, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CheckpointOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.exit = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.open_tcp = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.external_unix_sockets = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.terminal = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.file_locks = tmp;
                },
                6 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.empty_namespaces)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cgroups_mode)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.image_path)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.work_path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.exit != false {
            my_size += 2;
        }
        if self.open_tcp != false {
            my_size += 2;
        }
        if self.external_unix_sockets != false {
            my_size += 2;
        }
        if self.terminal != false {
            my_size += 2;
        }
        if self.file_locks != false {
            my_size += 2;
        }
        for value in &self.empty_namespaces {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        if !self.cgroups_mode.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.cgroups_mode);
        }
        if !self.image_path.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.image_path);
        }
        if !self.work_path.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.work_path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.exit != false {
            os.write_bool(1, self.exit)?;
        }
        if self.open_tcp != false {
            os.write_bool(2, self.open_tcp)?;
        }
        if self.external_unix_sockets != false {
            os.write_bool(3, self.external_unix_sockets)?;
        }
        if self.terminal != false {
            os.write_bool(4, self.terminal)?;
        }
        if self.file_locks != false {
            os.write_bool(5, self.file_locks)?;
        }
        for v in &self.empty_namespaces {
            os.write_string(6, &v)?;
        };
        if !self.cgroups_mode.is_empty() {
            os.write_string(7, &self.cgroups_mode)?;
        }
        if !self.image_path.is_empty() {
            os.write_string(8, &self.image_path)?;
        }
        if !self.work_path.is_empty() {
            os.write_string(9, &self.work_path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CheckpointOptions {
        CheckpointOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "exit",
                |m: &CheckpointOptions| { &m.exit },
                |m: &mut CheckpointOptions| { &mut m.exit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "open_tcp",
                |m: &CheckpointOptions| { &m.open_tcp },
                |m: &mut CheckpointOptions| { &mut m.open_tcp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "external_unix_sockets",
                |m: &CheckpointOptions| { &m.external_unix_sockets },
                |m: &mut CheckpointOptions| { &mut m.external_unix_sockets },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "terminal",
                |m: &CheckpointOptions| { &m.terminal },
                |m: &mut CheckpointOptions| { &mut m.terminal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "file_locks",
                |m: &CheckpointOptions| { &m.file_locks },
                |m: &mut CheckpointOptions| { &mut m.file_locks },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "empty_namespaces",
                |m: &CheckpointOptions| { &m.empty_namespaces },
                |m: &mut CheckpointOptions| { &mut m.empty_namespaces },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cgroups_mode",
                |m: &CheckpointOptions| { &m.cgroups_mode },
                |m: &mut CheckpointOptions| { &mut m.cgroups_mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "image_path",
                |m: &CheckpointOptions| { &m.image_path },
                |m: &mut CheckpointOptions| { &mut m.image_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "work_path",
                |m: &CheckpointOptions| { &m.work_path },
                |m: &mut CheckpointOptions| { &mut m.work_path },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CheckpointOptions>(
                "CheckpointOptions",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CheckpointOptions {
        static instance: ::protobuf::rt::LazyV2<CheckpointOptions> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CheckpointOptions::new)
    }
}

impl ::protobuf::Clear for CheckpointOptions {
    fn clear(&mut self) {
        self.exit = false;
        self.open_tcp = false;
        self.external_unix_sockets = false;
        self.terminal = false;
        self.file_locks = false;
        self.empty_namespaces.clear();
        self.cgroups_mode.clear();
        self.image_path.clear();
        self.work_path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CheckpointOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CheckpointOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProcessDetails {
    // message fields
    pub exec_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProcessDetails {
    fn default() -> &'a ProcessDetails {
        <ProcessDetails as ::protobuf::Message>::default_instance()
    }
}

impl ProcessDetails {
    pub fn new() -> ProcessDetails {
        ::std::default::Default::default()
    }

    // string exec_id = 1;


    pub fn get_exec_id(&self) -> &str {
        &self.exec_id
    }
    pub fn clear_exec_id(&mut self) {
        self.exec_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_exec_id(&mut self, v: ::std::string::String) {
        self.exec_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exec_id(&mut self) -> &mut ::std::string::String {
        &mut self.exec_id
    }

    // Take field
    pub fn take_exec_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.exec_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ProcessDetails {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.exec_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.exec_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.exec_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.exec_id.is_empty() {
            os.write_string(1, &self.exec_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProcessDetails {
        ProcessDetails::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "exec_id",
                |m: &ProcessDetails| { &m.exec_id },
                |m: &mut ProcessDetails| { &mut m.exec_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProcessDetails>(
                "ProcessDetails",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProcessDetails {
        static instance: ::protobuf::rt::LazyV2<ProcessDetails> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProcessDetails::new)
    }
}

impl ::protobuf::Clear for ProcessDetails {
    fn clear(&mut self) {
        self.exec_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProcessDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProcessDetails {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \nBgithub.com/containerd/containerd/runtime/v2/runc/options/oci.proto\
    \x12\x12containerd.runc.v1\x1a\x14gogoproto/gogo.protoX\0\"\x81\x03\n\
    \x07Options\x12$\n\rno_pivot_root\x18\x01\x20\x01(\x08R\x0bnoPivotRootB\
    \0\x12&\n\x0eno_new_keyring\x18\x02\x20\x01(\x08R\x0cnoNewKeyringB\0\x12\
    !\n\x0bshim_cgroup\x18\x03\x20\x01(\tR\nshimCgroupB\0\x12\x17\n\x06io_ui\
    d\x18\x04\x20\x01(\rR\x05ioUidB\0\x12\x17\n\x06io_gid\x18\x05\x20\x01(\r\
    R\x05ioGidB\0\x12!\n\x0bbinary_name\x18\x06\x20\x01(\tR\nbinaryNameB\0\
    \x12\x14\n\x04root\x18\x07\x20\x01(\tR\x04rootB\0\x12\x1d\n\tcriu_path\
    \x18\x08\x20\x01(\tR\x08criuPathB\0\x12'\n\x0esystemd_cgroup\x18\t\x20\
    \x01(\x08R\rsystemdCgroupB\0\x12(\n\x0fcriu_image_path\x18\n\x20\x01(\tR\
    \rcriuImagePathB\0\x12&\n\x0ecriu_work_path\x18\x0b\x20\x01(\tR\x0ccriuW\
    orkPathB\0:\0\"\xcf\x02\n\x11CheckpointOptions\x12\x14\n\x04exit\x18\x01\
    \x20\x01(\x08R\x04exitB\0\x12\x1b\n\x08open_tcp\x18\x02\x20\x01(\x08R\
    \x07openTcpB\0\x124\n\x15external_unix_sockets\x18\x03\x20\x01(\x08R\x13\
    externalUnixSocketsB\0\x12\x1c\n\x08terminal\x18\x04\x20\x01(\x08R\x08te\
    rminalB\0\x12\x1f\n\nfile_locks\x18\x05\x20\x01(\x08R\tfileLocksB\0\x12+\
    \n\x10empty_namespaces\x18\x06\x20\x03(\tR\x0femptyNamespacesB\0\x12#\n\
    \x0ccgroups_mode\x18\x07\x20\x01(\tR\x0bcgroupsModeB\0\x12\x1f\n\nimage_\
    path\x18\x08\x20\x01(\tR\timagePathB\0\x12\x1d\n\twork_path\x18\t\x20\
    \x01(\tR\x08workPathB\0:\0\"-\n\x0eProcessDetails\x12\x19\n\x07exec_id\
    \x18\x01\x20\x01(\tR\x06execIdB\0:\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
